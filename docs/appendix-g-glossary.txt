% Perl 6 Tablets Appendix G - Glossary

Here you find short explanations to most of the computer science terms,
used in the tablets. These contain also links to specific syntax details,
that relate to that term. Thatswhy this page is also  the ideal entry point for
questions like: "Can I do [*functional programming*](functional-programming) in Perl 6?"
or "What kind of [*iterators*](#iterators) are present and how they are spelled?"

<a id="nav-top"/>
**Navigation:    [A](#a) [B](#b) [C](#c) [D](#d) [E](#e)
[F](#f)  [G](#g) [H](#h) [I](#i) [J](#j) [K](#k) [L](#l)
[M](#m#) [N](#n) [O](#o) [P](#p) [Q](#q) [R](#r) [S](#s)
[T](#t#) [U](#u) [V](#v) [W](#w) [X](#x) [Y](#y) [Z](#z)**

<a id="french-greater-ö-grench-lower"/>
**»ö«** &mdash;
pure text version of [*camelia*](#camelia) the Perl 6 mascot

# [A](#nav-top)

<a id="ALAP"/>
**ALAP** *(as late as possible)* &mdash;
within a given execution phase
([compile time](#compile-time) or [run time](#run-time))

<a id="and"/>
**and** &mdash;
logical operation which results in [**True**](appendix-a-index.html#True)
only in case  both operands (incoming information) are also **True**,
otherwise the result is [**False**](appendix-a-index.html#True),
following [*operator*](#operator) are working under that logic:
[**|**](appendix-a-index.html#junctive-and),
[**||**](appendix-a-index.html#logical-and),
[**+|**](appendix-a-index.html#numeric-and),
[**?|**](appendix-a-index.html#boolean-and),
[**~|**](appendix-a-index.html#string-and),
[**all**](appendix-a-index.html#all),
[**and**](appendix-a-index.html#and)
[**andthen**](appendix-a-index.html#andthen) &mdash;
other operations in [*bool context*](#bool-context) are:
[*or*](#or), [*xor*](#xor), [*not*](#not)

<a id="argument"/>
**argument** &mdash;
a specific value given to a [routine](#routine) at a certain time,
not to be confused wirh [*parameter*](#parameter)

<a id="array"/>
**array** &mdash;
mostly synonym for [*list*](#list)

<a id="ASAP"/>
**ASAP** *(as soon as possible)* &mdash;
within a given execution phase
([*compile time*](#compile-time) or [run time](#run-time))

<a id="ASCII"/>
**ASCII** &mdash;
short name of an american body that sets standards, but in computer science
its often synonym for a particular standard that enumerates 127 character,
95 of them are visible the rest are control character, e.g. "begin a new line",
its basically A-Z, a-z, 0-9 and some extra symbols like \$, \%, \&,
what you find on your keyboard and what an american typically needs,
to enable the rest of the world more fully there is [*unicode*](#unicode)

<a id="AST"/>
**AST** *(abstract syntax tree)* &mdash;
tree like data structure, in which source code is transformed,
while [parsing](#parsing) it

<a id="atribute"/>
**atribute** &mdash;
fundamentally just a [*variable*] that belongs to an [*object*](#object)


# [B](#nav-top)

<a id="backtracking"/>
**backtracking** &mdash;
while searching for a [*regex pattern*](#regex) in a string,
perl has to keep track how far this string matched so far,
while comparing letter by letter from left to right.
Thus there have to be pointer that wander from left to right.
Backtracking refers just to the ability of this pointer to wander
back leftward a bit and try another possibility after a part of a
pattern didn't match

<a id="binding"/>
[**binding**](tablet-3-variables.html#binding) &mdash;
making two variables share the same content by pointing to same
memory location, done i Perl 6 with 
[**:=**](appendix-a-index.html#runtime-binding-op) 
and [**::=**](appendix-a-index.html#compiletime-binding-op)

<a id="block"/>
**block** &mdash;
syntactically just a piece of code inside curly brackets
(**{}**), when [evaluated](#evaluation) it becomes an
object of the type [**Block**](appendix-a-index.html#block-type)

<a id="bool-context"/>
**boolean context** &mdash;
[**Bool**](appendix-a-index.html#Bool-type)
[ops](tablet-4-operators.html#bool-context)

# [C](#nav-top)

<a id="camelia"/>
**camelia** &mdash;
name of the the Perl 6 mascot, she supposed to look happy,
but create tornados in the amazon or something like that

<a id="capture"/>
**capture** &mdash;
is the name of a [type of storage](#Capture-type) for the [*arguments*](#argument)
of a specific [*routine*](#routine) call. When variables are used in this call
like: `chop( $text )`, then the capture works like a [*reference*](#reference)
to this variable and provides access to that variable, 
[more ...](tablet-3-variables.html#capture)

<a id="class"/>
**class** &mdash;

<a id="closure"/>
**closure** &mdash;
routines whose state (content of all local variables) is
completely preserved until the next execution,
mostly used as a fancy alias for a [*block*](#block)

<a id="codepoint"/>
**codepoint** &mdash;
A [*unicode*](#unicode) primitive, represented by a specific number,
that stands for a slightly varying graphical representation.
Since you can create with *unicode* combined character like an A with an
flying pig on top, you would have 2 codepoints but only one [*grapheme*](#grapheme)

<a id="coderef"/>
**coderef** &mdash;
[*reference*] to an executable [*block*](#block) of code ([*routine*](#routine)),
in Perl 6 there are just [objects](#object) representing a routine that can be
[attributes](#attribute) of other objects

<a id="code-context"/>
**code context** &mdash;
also called callable context

<a id="compilation"/>
**compilation** &mdash;
reading the human written source code and make it an
executable (piece of) program

<a id="compile-time"/>
**compile time** &mdash;
time when Perl converts source code to executable form (bytecode),
is always before [*run time*](#run-time)
even if code can be compiled via [**eval**](appendix-a-index.html#eval) and
[**evalfile**](appendix-a-index.html#evalfile) when the program is
already runnung, to run code at the begin of compile time use
[**BEGIN**](appendix-a-index.html#BEGIN-phaser) and
[**CHECK**](appendix-a-index.html#CHECK-phaser) to run at the end of
compile time for that unit (mostly the file or the to be **eval**ed string)

<a id="complex-number"/>
**complex number** &mdash;

<a id="context"/>
**context** &mdash;
Everything and hence every value is in Perl 6 an [*object*](#object) of a
certain [*type*](#type). If that *type* doesn't match the demand of the
[*operator*](#operator) it is given to, it will be converted into the demanded.
It is said that this *operator* had forced the context of a certain *type*.
Most important are the [*item context*](item-context),
[*array context*](array-context), [*numeric context*](numeric-context),
[*string context*](string-context) and [*bool context*](bool-context).
A *context* can also be forced upon a [*routine*](#routine),
when its return value has to react to the context in which it is called.

<a id="context-variable"/>
**context variable** &mdash;
name for [**$\_**](appendix-a-index.html#context-var),
which is used by built in Perl functions as an implicit
parameter and as memory of the last result

<a id="currying"/>
**currying** &mdash;
creating a [*subroutine*](routine) that calls another with certain
[*parameter*](#parameter) to be predefined


# [D](#nav-top)

<a id="declarand"/>
**declarand** &mdash;
the thing being declared, example: `$foo` in `my $foo;`,
see also [declarator](#declarator)

<a id="declarative-programming"/>
**declarative programming** &mdash;
programming paradigm that expresses the logic of a computation
without describing its control flow

<a id="declarator"/>
**declarator** &mdash;
the command that declares to another entity that it will have a certain property
like the "my", "our", "has" ... in a declaration like `my $foo;`,
see also [declarand](#declarand)

<a id="delegation"/>
**delegation** &mdash;
is a techtique where an [*object*](#object) has a [*method*](#method) that just
calls a *method* of one of its [*attributes*](#attribute). If the object is
a space ship which has a clock is would allow you to call `$ship.time` instead
of `$ship.clock.time`

<a id="design-by-contract"/>
**design by contract** &mdash;
programming style in which parameters and return values from
[*routines*](#routine) must meet conditions, in Perl 6 done by
[*signatures*](#signature)

<a id="double-quoting"/>
**double quoting** &mdash;
[**" "**](appendix-a-index.html#double-quotes)


# [E](#nav-top)

<a id="e"/>
[**e**](appendix-a-index.html#e-constant) *(euler number)* &mdash;
about 2.71828182878434, fundamental mathematical constant,
important to the functions 
[**exp**](appendix-a-index.html#exp) and [**log**](appendix-a-index.html#log),
see also: [*i*](#i), [*pi*](#pi)

<a id="encoding"/>
**encoding** &mdash; ASCII UTF-8

<a id="evaluation"/>
**evaluation** &mdash;
transforming something, that it gets ready for practical usage -
sometimes means that just replacing in a piece of code all variables with there
current content, cometimes more like interpreting or compiling something;
inside quotes and [regexes](#regex) it has the first meaning,
the command [**eval**](appendix-a-index.html#eval) and
[**evalfile**](appendix-a-index.html#evalfile) does the second.

<a id="expression"/>
**expression** &mdash;
a combination of [*terms*](#term) and [*operators*](#operator)
like: `$a = $b++ - 7;`.
It can contain values, constants, variables, operators, and functions.
Each of the parts has to have a [*precedence level*](#precedence) which decides 
in which order they are considered.

# [F](#nav-top)

<a id="fat-arrow"/>
**fat arrow** &mdash;
a name for this [*operator*](#operator): 
[**=\>**](appenisdix-a-index.html#fat-arrow)

<a id="file-handle"/>
**file handle** &mdash;
is just a [*variable*](#variable) through which you can access a file.
Technically these are just [*scalars*](#scalar) holding an [*objects*](#object)
of the [*type*](#type) [**IO**](appendix-a-index.html#IO-type) which can do much
more than just read and write files.
They can access directories, [*pipes*](#pipe) the command line (shell) 
and contain also the [test methods](appendix-b-grouped.html#test-methods).
But if its just about getting the file content in on swoop or line wise,
[**slurp**](appendix-a-index.html#slurp) and 
[**lines**](appendix-a-index.html#lines) do that without a *file handle*.

<a id="functional-programming"/>
**functional programming** &mdash;
exclusively function based programming
style, [strongly supported](appendix-d-delta.html#functional-programming)
by Perl 6, considered as a branch of Declarative Programming

# [G](#nav-top)

<a id="grammar"/>
**grammar** &mdash;

<a id="grapheme"/>
**grapheme** &mdash;
a [*unicode*](#unicode) character like a japanese kanji that may be composed
out of several [codepoints](#codepoint)

# [H](#nav-top)

<a id="hash"/>
**hash** &mdash;
[**Hash**](appendix-a-index.html#Hash-type)

<a id="hash-context"/>
**hash context** &mdash;
[hash](#hash) [context](#context)

<a id="heredoc"/>
**heredoc** &mdash;


# [I](#nav-top)

<a id="i"/>
[**i**](appendix-a-index.html#i-constant) *(imaginary number)* &mdash;
square root of -1, fundamental mathematical constant to build 
[*complex number*](#complex-number), displayed as `0+1i`
important to the functions,
see also: [*e*](#e), [*pi*](#pi)

<a id="interpolation"/>
**interpolation** &mdash;

<a id="invocant"/>
**invocant** &mdash;
[*routine*](#routine) or [statement](#statement) that called the piece
of code of issue

<a id="item-context"/>
**scalar context** &mdash;
is a [*context*](#context) of the [Scalar type](appendix-a-index.html#Scalar-type),
is called in Perl 5 [scalar context](#scalar-context)

<a id="iteration"/>
**iteration** &mdash;
repeated executing of a term or [*block*](#block),
enforced by [*iterators*](#iterator)

<a id="iterator"/>
**iterator** &mdash; [iterators](appendix-b-grouped.html#loops)

# [J](#nav-top)

<a id="junction"/>
[**junction**](tablet-4-operators.html#Junctions) &mdash;
a [type of value](appendix-a-index.html#Junction-type) that holds a logical
combination of several values, example: (A and B) or C, 
create them with [junctive ops](appendix-b-grouped.html#junctions)

# [K](#nav-top)

# [L](#nav-top)

<a id="lexical-scope"/>
**lexical scope** &mdash;

<a id="list"/>
**list** &mdash;

<a id="list-context"/>
**list context** &mdash; 
[**Array**](appendix-a-index.html#Array-type)

<a id="list-flattening"/>
**list flattening** &mdash;

<a id="LOL"/>
**LOL** *(List of List)* &mdash;
[special type](appendix-a-index.html#LoL) of [*list*](#list) that can contain
other lists, like: `[[1,2,3], [4,5,6]]` which is a list with 2 elements

<a id="lol-context"/>
**lol context** &mdash;
[**lol**](appendix-a-index.html#lol) context means these sublists
(as explained in [*LOL*](#LOL)) will not [*flattened*](#list-flattening)

<a id="LTM"/>
**LTM** *(longest token matching)* &mdash;
when searching a pattern with alternatives (sub|substr)
the search will continue after finding the pattern 'sub'
because of looking for the longest alternative

<a id="lvalue"/>
**lvalue** &mdash;
when searching a pattern with alternatives (sub|substr)
the search will continue after finding the pattern 'sub'
because of looking for the longest alternative

# [M](#nav-top)

<a id="metaoperator"/>
[**metaoperator**](appendix-b-grouped.html#metaoperators) &mdash;
operator that alters the meaning or expands the scope of another normal operator,
[a listing of them](appendix-b-grouped.html#metaoperators)

<a id="metaprogramming"/>
**metaprogramming** &mdash; 

<a id="method"/>
**method** &mdash;
is a [*routine*] that belongs to a [*object*](#object) or a class

<a id="MMD"/>
**MMD** *(multimethod dispatch)* &mdash;
technique where several [*routines*](#routine) can have the same name,
but different [*signatures*](#signature), when the name is called - the
suitable routine is seleted via *MMD* &mdash;
see also: [**multi**](appendix-a-index.html#multi)

# [N](#nav-top)

<a id="named-capure"/>
**named capure** &mdash;

<a id="named-parameter"/>
**named parameter** &mdash;

<a id="namespace"/>
**namespace** &mdash;

<a id="not"/>
**not** &mdash;
logical operation that changes a true into false and vice versa,
following operator working under that logic:
[**!()**](appendix-a-index.html#negation-op),
[**not**](appendix-a-index.html#not) &mdash;
other operations in [*bool context*](#bool-context) are:
[*and*](#and), [*or*](#or), [*xor*](#xor) 

<a id="numeric-context"/>
**numeric context** &mdash; [**Num**](appendix-a-index.html#Num-type) [*type*](#type)

# [O](#nav-top)

<a id="object"/>
**object** &mdash; [*OOP*](#OOP)

<a id="OOP"/>
**OOP** *(object oriented orogramming)* &mdash;
programming paradigm (style), that arranges data and functions
that belong together into so called objects

<a id="operand"/>
**operand** &mdash;

<a id="operator"/>
**operator** &mdash;

<a id="or"/>
**or** &mdash;
logical operation that has a the result **True** if at least one of two
operands (incoming information) is also true, otherwise result is **False**
following operator working under that logic:
[**|**](appendix-a-index.html#junctive-or),
[**||**](appendix-a-index.html#logical-or),
[**//**](appendix-a-index.html#defined-or),
[**+|**](appendix-a-index.html#numeric-or),
[**?|**](appendix-a-index.html#boolean-or),
[**~|**](appendix-a-index.html#string-or),
[**any**](appendix-a-index.html#any),
[**or**](appendix-a-index.html#or)
[**orelse**](appendix-a-index.html#orelse),
[**err**](appendix-a-index.html#err) &mdash;
other operations in [*bool context*](#bool-context) are:
[**and**](#and), [**xor**](#xor), [**not**](#not)


# [P](#nav-top)

<a id="parameter"/>
**parameter** &mdash;
a slot for an [argument](#argument) that a [*routine*](#routine) accepts,
it usually has a [*type*](#type) that sets limits what values are acceptable,
there are *required parameter*, *optional parameter*,
[*positional parameter*](#positional-parameter) and [named parameter](#named-parameter),
sum of all parameters is called [signature](#signature)

<a id="parsetree"/>
**parsetree** &mdash;
hierarchical data representing the logical structure
of a program, also called [*AST*](#AST)

<a id="parsing"/>
**parsing** &mdash;

<a id="phaser"/>
[**phaser**](appendix-b-grouped.html#closure-traits) &mdash;
Perl 6 term for specially named (due a prefix statement) subblocks withe special
[*runtimes*](#run-time) aka [*closure traits*](appendix-b-grouped#closure-traits) &mdash;
example: [**BEGIN**](appendix-a-index.html#BEGIN-phaser)

<a id="pi"/>
[**pi**](appendix-a-index.html#pi-constant) *(π)* &mdash;
about 3.14159265394248, fundamental mathematical constant,
ratio of a circle's circumference to its diameter
important to the functions,
see also: [*e*](#e), [*i*](#i)

<a id="pipe"/>
**pipe** &mdash;
connection between 2 processes, move data (mostly only in one direction)
without buffering, can also mean just the connection of several commands via 
[**==\>**](appendix-a-index.html#equal-equal-greater-op) and alike

<a id="POD"/>
[**POD**](tablet-2-basic-syntax.html#pod)
*(Plain Old Documentation)* &mdash;
a markup language to embeded documentation into Perl source code,
has in Perl 6 the ability to store data into special variables 
like [**\$=pod**](appendix-a-index.html#pod-pod-var) to be retrieved later,
all pod-directives start with a equal sign - more details are written in the
[basics tablet](tablet-2-basic-syntax.html#pod)

<a id="pointy-block"/>
**pointy block** &mdash;
a block that is given readonly [*parameters*](parameter) with
[**-\>**](appendix-a-index.html#arrow-op) or rw parameters with
[**<-\>**](appendix-a-index.html#lower-minus-greater-op)

<a id="precedence"/>
**precedence** &mdash;
[table of precedence](appendix-b-grouped.html#table-of-precedence)

<a id="property"/>
**property** &mdash;
metadata of a variable set at [run time](#run-time)

<a id="positional-parameter"/>
**positional parameter** &mdash;


# [Q](#nav-top)


<a id="quasiquoting"/>
**quasiquoting** &mdash;
[**$~Quasi**](appendix-a-index.html#Quasi-slang-var),
[**:code**](appendix-a-index.html#code-adverb), 
[**quasi**](appendix-a-index.html#quasi)


<a id="quote-protection"/>
**quote protection** &mdash;
Perl 5 and 6 have the nice [**qw**](appendix-a-index.html#qw-op) operator,
thats splits a string into words according to the whitespace between words,
if you wish a word to contain whitespace, you have to put it in quotes:
`<<these are "three words">>`, this mechanism is called quote protection
and is provided by the adverb [**:ww**](appendix-a-index.html#ww-adverb)
aka [**:quotewords**](appendix-a-index.html#quotewords-adverb) which is included
in [**\<\< \>\>**](appendix-a-index.html#double-angle-brackets-op),
the adverb [**:w**](appendix-a-index.html#w-adverb) aka
[**:words**](appendix-a-index.html#words-adverb) which support **qw** as well as
[**< >**](appendix-a-index.html#angle-brackets-op) don't provide this service,
that might also be known to shell users: `<these are 'four words'>`


<a id="quoting"/>
**quoting** &mdash;


# [R](#nav-top)

<a id="radian"/>
**radian** &mdash;


<a id="reference"/>
**reference** *(or pointer)* &mdash;
address of a specific location in the computers memory,
officially there are no references in Perl 6, 
but there are several container types that can hold other container of values,
and there is [binding](#binding)

<a id="regex"/>
**regex** *(regular expression)* &mdash;
in Perl 5 its a pattern matching notation,
in Perl 6 a whole rearranged language that does the same,
a [whole page](tablet-9-regexes.html) is dedicated just about that subject

<a id="reify">
**reify** &mdash;

<a id="role"/>
**role** &mdash;

<a id="routine"/>
**routine** &mdash;
[block](#block) of code callable by name,
can have a [*signature*](#signature) and a return type,
when block is [compiled](#compilation) it becomes an object of the type
[**SoftRoutine**](appendix-a-index.html#softroutine-type)
or [**HardRoutine**](appendix-a-index.html#hardroutine-type)

<a id="run-time"/>
**run time** &mdash;
time when execution hits a certain part of the program,
after [*compile time*](#compile-time)


# [S](#nav-top)

<a id="scalar"/>
**scalar** &mdash;

<a id="scalar-context"/>
**scalar context** &mdash;
is in P6 called [item context](#item-context)

<a id="scope"/>
**scope** &mdash;
area within which an identifier (like a variable) is usable,
normally the current [block](#block)

<a id="sigil"/>
**sigil** &mdash;
character that serves as a prefix to categorize the following name,
(stays without spacing in front of the actual name)
most prominent in Perl are the variable [sigils](appendix-b-grouped.html#sigils):
[**$**](appendix-a-index.html#dollar-sigil),
[**@**](appendix-a-index.html#at-sigil) and
[**%**](appendix-a-index.html#percent-sigil),
they serve as different variable [*namespaces*](#namespace) and make
[*interpolation*](#interpolation) much easier for human and the computer,
for more info see the [variable tablet](tablet-3-variables.html)


<a id="signature"/>
**signature** &mdash;
function parameters (left-hand side of a binding),
surrounded by round parentheses in the definition of a [*routine*](#routine)

<a id="single-quoting"/>
**single quoting** &mdash;
[**' '**](appendix-a-index.html#single-quotes)

<a id="slang"/>
**slang** &mdash;
sublanguages of Perl 6, quoting or [*regular expression*](#regular expression)
are completely independent languages, the grammar to parse them is mostly stored
in [special variables](appendix-b-grouped.html#slang-variables)
with the [*twigil*](#twigil) **\~**, 
[**\$\~MAIN**](appendix-a-index.html#MAIN-lang-var) (main language),
you can change or alter them by using the keyword 
[**augment**](appendix-a-index.html#augment)
or [**supersede**](appendix-a-index.html#supersede)

<a id="slice"/>
**slice** &mdash;
part of an array or list

<a id="slurpy-array"/>
**slurpy array** &mdash;
array [*parameter*](#parameter) that receives (slurps) all remaining 
[*arguments*](#argument) as one [*list*](#list)

<a id="smartmatch"/>
**smartmatch** &mdash;
The original Perl 6 *smartmatch* [*operator*](#operator) looks like this:
[**~~**](appendix-a-index.html#smartmatch-op) and does an universal
"compare this with that" dependend on the [*types*](#type) of the [*operands*](#operand).
That can range from simple comparison of two values to applying a [*regex*](#regex)
up to the question if two [*signatures*](#signature) are compatible -
all details in [that table](appendix-b-grouped.html#smartmatch).

<a id="statement"/>
**statement** &mdash;
smallest standalone element that can be executed,
everything smaller is just a [*term*](#term),
larger combinations of them are [*expressions*](#expression)

<a id="string-context"/>
**string context** &mdash;
[*context*](#context)
[**Str**](appendix-a-index.html#Str-type)
[ops](tablet-4-operators.html#string-context)

<a id="subroutine"/>
**subroutine** &mdash;
Perl 5-ish term for [routine](#routine) because in Perl 5 there is only the
*sub* command to build a callable block,
but in Perl 6 there are [much more types](#Routine-types) hence the name change


<a id="subrule"/>
**subrule** &mdash;
piece of a [*regular expression*](#regex) that has a name,
its findings are stored under that name,
some of them were used so often, that their built into to language as
[predefined subrules](appendix-b-grouped.html#subrules)

# [T](#nav-top)

<a id="term"/>
**term** &mdash;
a syntax "atom" like a pair of brackets, an [operator](#operator) or a value(4.32),
not to be confused with [*expression*](#expression)

<a id="test-method"/>
**test method** &mdash;
[test methods](appendix-b-grouped.html#test-methods).

<a id="topicalizer"/>
**topicalizer** &mdash;
every keyword that sets content of the context variable
([**$\_**](appendix-a-index.html#context-var)),
like [**given**](appendix-a-index.html#given) and [**for**](appendix-a-index.html#for)

<a id="trait"/>
**trait** &mdash;
additional property of a variable, defined at [*compile time*](#compile-time),
see [**but**](appendix-a-index.html#but), what other languages call
*trait* Perl calls [role](#role)

<a id="transliteration"/>
**transliteration** &mdash;
**quasiquoting** &mdash;
[**$~Trans**](appendix-a-index.html#Quasi-slang-var),
[**:trans**](appendix-a-index.html#trans-adverb),
[**.trans**](appendix-a-index.html#trans),
[**tr** ///](appendix-a-index.html#tr-op)


<a id="twigil"/>
[**twigil**](appendix-b-grouped.html#twigils) &mdash;
second(ary) [*sigil*](#sigil) indicating a special property of a variable,
[(more details here)](tablet-3-variables.html#twigils)

<a id="type"/>
**type** &mdash;

<a id="type-constraint"/>
**type constraint** &mdash;

# [U](#nav-top)

<a id="unicode"/>
**unicode** &mdash;
format to save text in, that can contain almost any letter or symbol known to men,
not just [*ASCII*](#ASCII), its [fully supported](appendix-d-delta.html#unicode)
by Perl 6, which means any part of a a program might use any character or symbol,
strange names that start with UTF are most probably Unicode formats

<a id="UTF-8"/>
**UTF-8** &mdash;


# [V](#nav-top)

<a id="value"/>
**value** &mdash;

<a id="variable"/>
**variable** &mdash;

# [W](#nav-top)

# [X](#nav-top)

<a id="xor"/>
**xor** *(eXclusive OR)* &mdash;
logical operation that has a the result **True** if only one of two
operands (incoming information) is also true, otherwise result is **False**,
following operator working under that logic:
[**\^**](appendix-a-index.html#junctive-xor),
[**\^\^**](appendix-a-index.html#logical-xor),
[**+\^**](appendix-a-index.html#numeric-xor),
[**?\^**](appendix-a-index.html#boolean-xor),
[**~\^**](appendix-a-index.html#string-xor),
[**one**](appendix-a-index.html#one),
[**xor**](appendix-a-index.html#xor) &mdash;
other operations in [*bool context*](#bool-context) are:
[*and*](#and), [*or*](#or), [*not*](#not)


# [Y](#nav-top)

<a id="yadda-operator"/>
[yadda operator](tablet-4-operators.html#yadda), 
placeholder for later to be written code inside a [routine](#routine),
because empty ones are forbidden, comes in 3 flavours:
[**...**](appendix-a-index.html#dot-yadda-op) (fail),
[**???**](appendix-a-index.html#question-mark) (warn) and
[**!!!**](appendix-a-index.html#exclamation-mark) (die)

# [Z](#nav-top)

***
